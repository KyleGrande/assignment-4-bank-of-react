{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","this","props","accountBalance","toFixed","Component","Home","className","src","alt","userName","UserProfile","memberSince","LogIn","handleChange","e","updatedUser","state","user","target","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","to","onSubmit","type","name","defaultValue","onChange","Credits","description","amount","credit","date","Date","toISOString","slice","addCredit","credits","reverse","map","id","htmlFor","required","min","step","Debits","debit","addDebit","debits","App","newCredits","creditList","Number","newDebits","debitList","logInInfo","newUser","currentUser","a","fetch","json","totalCredits","totalDebits","forEach","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70b53954.chunk.js","sourcesContent":["/*==================================================\nsrc/components/AccountBalance.js\n\nThe AccountBalance component displays account balance. It is included in other page views.\n==================================================*/\nimport React, {Component} from 'react';\n//round accoubt balance to 2 decimal places\n\nclass AccountBalance extends Component {\n  // Display account balance\n  render() {\n    return (\n      <div>\n        Balance: {this.props.accountBalance.toFixed(2)}\n      </div>\n    );\n  }\n}\n\nexport default AccountBalance;","/*==================================================\nsrc/components/Home.js\n\nThe Home component displays the user's account balance and a welcome message.\n==================================================*/\nimport React, { Component } from 'react';\nimport AccountBalance from './AccountBalance';\nimport './Home.css'; // Import the Home.css file\n\nclass Home extends Component {\n  render() {\n    // Render the home page with a welcome message and account balance\n    return (\n      <div className=\"home-container\">\n        <div className=\"content-container\">\n          <h1>Bank of React</h1>\n          <img src=\"https://picsum.photos/200/200\" alt=\"bank\" />\n          <h2>Welcome, {this.props.userName}!</h2>\n          <h2>\n            <AccountBalance accountBalance={this.props.accountBalance} />\n          </h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/*==================================================\nsrc/components/UserProfile.js\n\nThe UserProfile component is used to demonstrate the use of Route and Link.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\n\nimport './UserProfile.css'; // Import CSS styles\n\nclass UserProfile extends Component {\n  render() {\n    // Render user profile information\n    return (\n      <div className=\"userprofile\">\n        <div className=\"profile\">\n          <h1>User Profile</h1>\n\n          <h2>Username: {this.props.userName}</h2>\n          <h3>Member Since: {this.props.memberSince}</h3>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserProfile;\n","/*==================================================\nsrc/components/Login.js\n\nThe LogIn component is used to demonstrate the use of Redirect.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './Login.css';\n\nclass LogIn extends Component {\n  constructor (props) {  // Create and initialize state\n    super(props)\n    this.state = {\n      user: {\n        //userName: '',\n        userName: this.props.user.userName,  // Initialize userName using props input (currentUser in App.js)\n        password: ''\n      },\n      redirect: false  // Redirect property used to trigger Redirect\n    }\n  }\n\n  // When User Name input is changed, capture the new input value and update state\n  handleChange = (e) => {\n    const updatedUser = {...this.state.user};  // Create an object for state\n    updatedUser.userName = e.target.value;  // Set object's userName to the new input value\n    this.setState({user: updatedUser})  // Update state with object values\n  }\n\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.mockLogIn(this.state.user)  // Update state in the top-level component (App.js)\n    this.setState({redirect: true})  // Update state to trigger Redirect\n  }\n  \n  render () {\n    // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n    if (this.state.redirect) {  \n      return (<Redirect to=\"/userProfile\"/>);\n    }\n\n    // Render the login form (and call \"handleSubmit\" method when \"Log In\" button is clicked to submit form)\n    return (\n      <div className='login'>\n\n        <form onSubmit={this.handleSubmit} className='login-form'>\n        <h1>Login</h1>\n\n        <div className='login-form-row'>\n            <label className='login-form-label'>User Name</label>\n            <input type=\"text\" name=\"userName\" defaultValue={this.props.user.userName} onChange={this.handleChange} className='login-form-input' />\n            <label className='login-form-label'>Password</label>\n            <input type=\"password\" name=\"password\" className='login-form-input' />\n          <button className='login-form-button'>Log In</button>\n          </div>\n        </form>  \n      </div>\n    );\n  }\n}\n\nexport default LogIn;","import React, { Component } from 'react';\nimport AccountBalance from './AccountBalance';\nimport './Credits.css'; // Import CSS styles\n\nclass Credits extends Component {\n  // Initialize state\n  state = {\n    description: '',\n    amount: '',\n  };\n\n  // Handle input field changes\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  // Handle form submission\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { description, amount } = this.state;\n    const date = new Date().toISOString().slice(0, 10); // Set the current date\n    const credit = { description, amount, date };\n\n    // Call the addCredit method from parent component (App)\n    this.props.addCredit(credit);\n\n    // Reset input fields\n    this.setState({\n      description: '',\n      amount: '',\n    });\n  };\n\n  render() {\n    // Render credit history in reverse order\n    const creditsView = () => {\n      const { credits } = this.props;\n      const reversedCredits = credits.slice().reverse(); // Make a reversed copy of the credits array\n      return reversedCredits.map((credit) => {\n        let date = credit.date.slice(0, 10);\n        return (\n          <li key={credit.id} className=\"credit-item\">\n            <div className=\"credit-info\">\n              <div className=\"credit-amount\">{credit.amount}</div>\n              <div className=\"credit-description\">{credit.description}</div>\n              <div className=\"credit-date\">{date}</div>\n            </div>\n          </li>\n        );\n      });\n    };\n\n    return (\n      <div className=\"credits\">\n        <div className=\"credit-content\">\n          <div className=\"credit-content-left\">\n            <h1>Credit History</h1>\n            <ul className=\"credit-list\">{creditsView()}</ul>\n          </div>\n\n          <div className=\"credit-content-right\">\n            <h1 className=\"account-balance\">\n              <AccountBalance accountBalance={this.props.accountBalance} />\n            </h1>\n            <form onSubmit={this.handleSubmit} className=\"credit-form\">\n              <div className=\"form-row\">\n                <label htmlFor=\"description\" className=\"form-label\">\n                  Description\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  id=\"description\"\n                  value={this.state.description}\n                  onChange={this.handleChange}\n                  className=\"form-input\"\n                  required\n                />\n              </div>\n              <div className=\"form-row\">\n                <label htmlFor=\"amount\" className=\"form-label\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"amount\"\n                  id=\"amount\"\n                  value={this.state.amount}\n                  onChange={this.handleChange}\n                  className=\"form-input\"\n                  required\n                  min=\"0.01\"\n                  step=\"0.01\"\n                />\n              </div>\n              <button type=\"submit\" className=\"form-button\">\n                Add Credit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Credits;\n","import React, { Component } from 'react';\nimport AccountBalance from './AccountBalance';\nimport './Debits.css'; // Import CSS styles\n\nclass Debits extends Component {\n  // Initialize state\n  state = {\n    description: '',\n    amount: '',\n  };\n\n  // Handle input field changes\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  // Handle form submission\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { description, amount } = this.state;\n    const date = new Date().toISOString().slice(0, 10); // Set the current date\n    const debit = { description, amount, date };\n\n    // Call the addDebit method from parent component (App)\n    this.props.addDebit(debit);\n\n    // Reset input fields\n    this.setState({\n      description: '',\n      amount: '',\n    });\n  };\n\n  render() {\n    // Render debit history in reverse order\n    const debitsView = () => {\n      const { debits } = this.props;\n      const reversedDebits = debits.slice().reverse(); // Make a reversed copy of the debits array\n      return reversedDebits.map((debit) => {\n        let date = debit.date.slice(0, 10);\n        return (\n          <li key={debit.id} className=\"debit-item\">\n            <div className=\"debit-info\">\n              <div className=\"debit-amount\">{debit.amount}</div>\n              <div className=\"debit-description\">{debit.description}</div>\n              <div className=\"debit-date\">{date}</div>\n            </div>\n          </li>\n        );\n      });\n    };\n\n    return (\n      <div className=\"debits\">\n        <div className=\"debit-content\">\n          <div className=\"debit-content-left\">\n            <h1>Debit History</h1>\n            <ul className=\"debit-list\">{debitsView()}</ul>\n          </div>\n\n          <div className=\"debit-content-right\">\n            <h1 className=\"account-balance\">\n              <AccountBalance accountBalance={this.props.accountBalance} />\n            </h1>\n            <form onSubmit={this.handleSubmit} className=\"debit-form\">\n              <div className=\"form-row\">\n                <label htmlFor=\"description\" className=\"form-label\">\n                  Description\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  id=\"description\"\n                  value={this.state.description}\n                  onChange={this.handleChange}\n                  className=\"form-input\"\n                  required\n                />\n              </div>\n              <div className=\"form-row\">\n                <label htmlFor=\"amount\" className=\"form-label\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"amount\"\n                  id=\"amount\"\n                  value={this.state.amount}\n                  onChange={this.handleChange}\n                  className=\"form-input\"\n                  required\n                  min=\"0.01\"\n                  step=\"0.01\"\n                />\n              </div>\n              <button type=\"submit\" className=\"form-button\">\n                Add Debit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Debits;\n","/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      accountBalance: 1234567.89,\n      creditList: [],\n      debitList: [],\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99',\n      },\n    };\n  }\n\n  async componentDidMount() {\n    // Fetch data from API\n    let credits = await (\n      await fetch('https://johnnylaicode.github.io/api/credits.json')\n    ).json();\n    let debits = await (\n      await fetch('https://johnnylaicode.github.io/api/debits.json')\n    ).json();\n\n    // Update creditList and debitList with data from API\n    this.setState({ creditList: credits, debitList: debits });\n\n    let totalCredits = 0;\n    let totalDebits = 0;\n\n    // Calculate total credits and debits\n    credits.forEach((credit) => {\n      totalCredits += credit.amount;\n    });\n\n    debits.forEach((debit) => {\n      totalDebits += debit.amount;\n    });\n\n    // Update account balance\n    this.setState({ accountBalance: totalCredits - totalDebits });\n  }\n\n  // Add a new credit and update account balance\n  addCredit = (credit) => {\n    const newCredits = [...this.state.creditList, credit];\n    this.setState({\n      creditList: newCredits,\n      accountBalance: this.state.accountBalance + Number(credit.amount),\n    });\n  };\n\n  // Add a new debit and update account balance\n  addDebit = (debit) => {\n    const newDebits = [...this.state.debitList, debit];\n    this.setState({\n      debitList: newDebits,\n      accountBalance: this.state.accountBalance - Number(debit.amount),\n    });\n  };\n\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {\n    const newUser = { ...this.state.currentUser };\n    newUser.userName = logInInfo.userName;\n    this.setState({ currentUser: newUser });\n  };\n\n  // Create Routes and React elements to be rendered using React components\n  render() {\n    // Create React elements and pass input props to components\n    const HomeComponent = () => (\n      <Home\n        accountBalance={this.state.accountBalance}\n        userName={this.state.currentUser.userName}\n      />\n    );\n\n    const UserProfileComponent = () => (\n      <UserProfile\n        userName={this.state.currentUser.userName}\n        memberSince={this.state.currentUser.memberSince}\n      />\n    );\n\n    const LogInComponent = () => (\n      <LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />\n    );\n\n    const CreditsComponent = () => (\n      <Credits\n        credits={this.state.creditList}\n        addCredit={this.addCredit}\n        accountBalance={this.state.accountBalance}\n      />\n    );\n\n    const DebitsComponent = () => (\n      <Debits\n        debits={this.state.debitList}\n        addDebit={this.addDebit}\n        accountBalance={this.state.accountBalance}\n      />\n    );\n\n\n  // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n  return (\n    <Router basename=\"/assignment-4-bank-of-react\">\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav className=\"navbar\">\n            <Link className=\"nav-link\" to=\"/\">\n              Home\n            </Link>\n            <Link className=\"nav-link\" to=\"/userProfile\">\n              User Profile\n            </Link>\n            <Link className=\"nav-link\" to=\"/login\">\n              Log In\n            </Link>\n            <Link className=\"nav-link\" to=\"/credits\">\n              Credits\n            </Link>\n            <Link className=\"nav-link\" to=\"/debits\">\n              Debits\n            </Link>\n          </nav>\n        </header>\n        <main className=\"App-main\">\n          <Route exact path=\"/\" render={HomeComponent} />\n          <Route exact path=\"/userProfile\" render={UserProfileComponent} />\n          <Route exact path=\"/login\" render={LogInComponent} />\n          <Route exact path=\"/credits\" render={CreditsComponent} />\n          <Route exact path=\"/debits\" render={DebitsComponent} />\n        </main>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*==================================================\nsrc/index.js\n\nThis file renders the top-level component App which contains all components of the app).\n==================================================*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// Note: In above, StrictMode is a tool for highlighting potential problems in an application. \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}